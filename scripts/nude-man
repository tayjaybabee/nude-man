#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Created on Mon Jul 20 04:34:19 2020.

@author: taylor
"""
import enum
import json
import os
import shutil
from glob import glob
from pathlib import Path

import subprocess
from nude_man.lib.config import default_data_out
from time import sleep
from logging import getLogger

import PIL.Image as Image
import requests
import tqdm
from halo import Halo
from inspy_logger import start as start_logger

import nude_man
from nude_man import DEFAULT_DATA_DIR
from nude_man.lib.config import default_data_out, default_data_in, Config
from nude_man.lib.config.args import parse
from nude_man.lib.config.environment import Environment

pic_num = 0

# Enum for size units


class SIZE_UNIT(enum.Enum):
    BYTES = 1
    KB = 2
    MB = 3
    GB = 4


class SizeCodex(object):
    def __init__(self):
        self.B = 1
        self.KB = self.B * 1024
        self.MB = self.KB * 1024
        self.GB = self.MB * 1024


class APIError(Exception):
    def __init__(self):
        self.api_url = 'https://deepai.org'
        self.message = 'An error of type APIError has occurred'


class KeyMissingError(APIError):
    def __init__(self):
        super().__init__()
        self.message += f'\nThere is no API key from {self.api_url} configured in nude-man.conf.'
        self.message += '\nRun "nude-man configure" or edit nude-man.conf'


class InvalidKeyError(APIError):
    def __init__(self, key):
        super().__init__()
        self.message += '\nInvalid API Key in specified in configuration file!'
        self.message += f'\nCurrently configured key: {key}'


class NudeManError(Exception):
    def __init__(self):
        pass


class OutDirNonexistantError(NudeManError):
    def __init__(self):
        """__init__ An exception class indicating that a non-existant output-directory was specified.

        An exception class for use in advising the user that the output directory that was specified in either the command-line arguments or in the configuration file does not exist.
        """
        super().__init__()
        self.message = 'The specified output directory does not exist!'


def get_checksum(file):
    import hashlib

    md5_hash = hashlib.md5()

    return md5_hash


def convert_unit(size_in_bytes, unit):
    """ Convert the size from bytes to other units like KB, MB or GB"""

    if unit == SIZE_UNIT.KB:
        return size_in_bytes / 1024

    elif unit == SIZE_UNIT.MB:
        return size_in_bytes / (1024 * 1024)

    elif unit == SIZE_UNIT.GB:
        return size_in_bytes / (1024 * 1024 * 1024)

    else:
        return size_in_bytes


def get_file_size(file_name, size_type=SIZE_UNIT.BYTES):
    """Get file in size in given unit like KB, MB or GB."""

    size = os.path.getsize(file_name)

    return size, convert_unit(size, size_type)


def grab_file_paths(start_dir):

    file_paths = []

    for name in tqdm.tqdm(glob(start_dir + "/*/*.jpg"), leave=False):
        pic = Image.open(name)
        name = str(name)
        f_name_raw = str(name).split("/")
        f_name, f_ext = f_name_raw.pop().split(".")

        size = get_file_size(name)

        byte = 1

        kb = byte * 1024
        fs_kb = SIZE_UNIT.KB
        kb_size = None

        mb = kb * 1024
        fs_mb = SIZE_UNIT.MB
        mb_size = None

        gb = mb * 1024
        fs_gb = SIZE_UNIT.GB
        gb_size = None

        kb_size = get_file_size(name, fs_kb)[1]
        mb_size = get_file_size(name, fs_mb)[1]
        gb_size = get_file_size(name, fs_gb)[1]

        if pic.format == "JPEG":
            file_obj = {
                "filepath": name,
                "name": f_name,
                "ext": f_ext,
                "b_size": size[0],
            }
            if kb_size:
                file_obj["kb_size"] = round(kb_size, 2)
            elif mb_size:
                file_obj["mb_size"] = round(mb_size, 2)
            elif gb_size:
                file_obj["gb_size"] = round(gb_size, 2)
            file_paths.append(file_obj)

        pic.close()

    return file_paths


found = []


def find_pictures(source_root=None, recursive=True):
    formats = [
        'ICO',
        'JPEG',
        'JPG',
        'PNG',
        'APNG',
        'WEBP'
    ]
    for fmt in formats:
        fmt = fmt.lower()
        fmt = f'*.{fmt}'

        pic_paths = glob('**/fmt', recursive=recursive)


def out(msg: str):
    tqdm.tqdm.write(msg)


def conclude(args, processed, dest):
    log_name = 'NudeMan.conclude'
    log = getLogger(log_name)
    debug = log.debug

    debug(f'Logger started for "{log_name}"')
    debug(f'Received {len(processed)} files to move')

    if args.dry_run:
        pass
    else:
        for file in processed:
            fp = Path(str(dest) + f'/{file["name"]}.{file["ext"]}')
            try:
                shutil.copy(file['filepath'], fp)
            except NotADirectoryError as e:
                log.warning(
                    f'Unable to find directory I need to write these pictures into: {dest}')
                confirm = makedir_confirm(dest)
                if confirm in [1, 2, 3]:
                    os.makedirs(dest)
                    if confirm == 1:
                        debug(
                            f'User indicated a desire to continue with a new directory structure for application output for one time: {dest}')


def makedir_confirm(directory):

    log_name = 'NudeMan.makedir_confirm'
    log = getLogger(log_name)
    log.debug(f'Started logger for {log_name}')

    str_dir = str(directory)
    q_choices = [

        '1. Yes.',
        f'2. Yes, and change the config file option to {str_dir} as well.',
        '3. Yes, always create new output directories passed via command line.',
        '4. No.',
        '5. No, and never create new output directories if passed via command line.',
        '6. Let me enter in a new directory.',
        f'7. Use default output directory: {default_data_out}\n'
    ]
    q = f'Intended Output Directory: {str_dir}\n\n'
    q += '\n'.join(q_choices) + '\n'
    q += 'Since I was unable to find the given output directory, would you like me to create it?: '

    a_nums = []

    for i in range(1, len(q_choices) + 1):
        a_nums.append(i)

    confirmed = False

    while not confirmed:
        try:
            a = int(input(q))
        except ValueError as e:
            e_msg = e.__str__()
            msg_match = 'invalid literal for int' in e_msg

            if msg_match:
                log.error(
                    'You must provide the number that coincides with what you want to do.')
            else:
                log.error('{e_msg}')
                raise

        if a not in a_nums:
            log.warning(
                f'That is not a valid choice! Please choose from {a_nums}!')
            subprocess.run('clear')
            for i in range(5):
                log.warning('Not a valid choice')
                sleep(.2)
                subprocess.run('clear')
                sleep(.2)
        else:
            confirmed = True

        return


def main():

    args = parse()
    log = start_logger('NudeMan', args.verbose)

    env = Environment(args)

    log.info(f'dir(env)')

    _conf = Config(args, env)

    config = _conf.conf

    log.debug(
        f'Found a config file with the following sections: {config.sections()}')

    start_dir = args.source_start

    if start_dir:
        if "~" in start_dir:
            start_dir = os.path.expanduser(start_dir)
        else:
            start_dir = str(args.source_start)
    else:
        start_dir = os.getcwd()

    out_dir = config['SETTINGS']['output-dir']

    if not out_dir == args.output_directory:

        od = Path(args.output_directory).resolve()
        log.debug(
            'User specified an output directory that differs from the one loaded in the config file.')
        if Path(od).exists:
            out_dir = od
        else:
            raise OutDirNonexistantError()

    else:
        log.debug(
            f'No custom output directory received. Falling back on default path: {args.output_directory}')
        out_dir = args.output_directory

    file_paths = grab_file_paths(start_dir)
    num_files = len(file_paths)
    out(f"Found {num_files} files")
    processed = []
    for file in tqdm.trange(num_files, leave=True):
        _file = file_paths.pop()

        res = requests.post(
            "https://api.deepai.org/api/nsfw-detector",
            files={"image": open(_file["filepath"], "rb"), },
            headers={"api-key": f"{config['SETTINGS']['api-key']}"},
        )
        out_name = _file["name"]
        data = res.json()

        if "err" in data.keys():
            out("Error processing image!")
            continue
        if 'status' in data.keys():
            if 'Please pass a valid Api-Key' in data['status']:
                if config['SETTINGS']['api-key']:
                    raise InvalidKeyError(config['SETTINGS']['api-key'])
                else:
                    raise KeyMissingError()

        data_str = str(data)
        out(data_str)
        score = int(data["output"]["nsfw_score"] * 100)
        _file["nsfw_score"] = score
        out(f"{out_name}: {score}%")

        if score >= 75:
            out("Match!")
            processed.append(_file)
            out(", ".join(_file))
            print(processed)

    print(str(len(processed)) + ' pictures considered "NSFW"')

    try:
        conclude(args, processed, out_dir)
    except OutDirNonexistantError as e:
        log.error(e.message)
        makedir_confirm(out_dir)


if __name__ == "__main__":
    try:
        main()
    except InvalidKeyError as e:
        print(e.message)
        raise
    except KeyMissingError as e:
        print(e.message)
        raise
