#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Created on Mon Jul 20 04:34:19 2020.

@author: taylor
"""
import requests
import argparse
from glob import glob
from pathlib import Path
import PIL.Image as Image
import tqdm
import os
from halo import Halo
import enum

DEFAULT_DATA_DIR = os.path.expanduser("~/Inspyre-Softworks/NudeMan")


# Enum for size units
class SIZE_UNIT(enum.Enum):
    BYTES = 1
    KB = 2
    MB = 3
    GB = 4


class SizeCodex(object):
    def __init__(self):
        self.B = 1
        self.KB = self.B * 1024
        self.MB = self.KB * 1024
        self.GB = self.MB * 1024


def get_checksum(file):
    import hashlib

    md5_hash = hashlib.md5()

    return md5_hash


def convert_unit(size_in_bytes, unit):
    """ Convert the size from bytes to other units like KB, MB or GB"""

    if unit == SIZE_UNIT.KB:
        return size_in_bytes / 1024

    elif unit == SIZE_UNIT.MB:
        return size_in_bytes / (1024 * 1024)

    elif unit == SIZE_UNIT.GB:
        return size_in_bytes / (1024 * 1024 * 1024)

    else:
        return size_in_bytes


def get_file_size(file_name, size_type=SIZE_UNIT.BYTES):
    """Get file in size in given unit like KB, MB or GB."""

    size = os.path.getsize(file_name)

    return size, convert_unit(size, size_type)


def grab_file_paths(start_dir):

    file_paths = []

    for name in tqdm.tqdm(glob(start_dir + "/*/*.jpg"), leave=False):
        pic = Image.open(name)
        name = str(name)
        f_name_raw = str(name).split("/")
        f_name, f_ext = f_name_raw.pop().split(".")

        size = get_file_size(name)

        byte = 1

        kb = byte * 1024
        fs_kb = SIZE_UNIT.KB
        kb_size = None

        mb = kb * 1024
        fs_mb = SIZE_UNIT.MB
        mb_size = None

        gb = mb * 1024
        fs_gb = SIZE_UNIT.GB
        gb_size = None

        kb_size = get_file_size(name, fs_kb)[1]
        mb_size = get_file_size(name, fs_mb)[1]
        gb_size = get_file_size(name, fs_gb)[1]

        if pic.format == "JPEG":
            file_obj = {
                "filepath": name,
                "name": f_name,
                "ext": f_ext,
                "b_size": size[0],
            }
            if kb_size:
                file_obj["kb_size"] = round(kb_size, 2)
            elif mb_size:
                file_obj["mb_size"] = round(mb_size, 2)
            elif gb_size:
                file_obj["gb_size"] = round(gb_size, 2)
            file_paths.append(file_obj)

        pic.close()

    return file_paths


found = []


def find_pictures(source_root=None, recursive=True):
    formats = [
        'ICO',
        'JPEG',
        'JPG',
        'PNG',
        'APNG',
        'WEBP'
    ]
    for fmt in formats:
        fmt = fmt.lower()
        fmt = f'*.{fmt}'

        pic_paths = glob('**/fmt', recursive=recursive)


def out(msg: str):
    tqdm.tqdm.write(msg)


def conclude():
    pass


def main():
    parser = arg_parser()

    config = Config()

    args = parser.parse_args()

    start_dir = args.start_dir

    if start_dir:
        if "~" in start_dir:
            start_dir = os.path.expanduser(start_dir)
        else:
            start_dir = str(args.start_dir)
    else:
        start_dir = os.getcwd()

    file_paths = grab_file_paths(start_dir)
    out(f"Found {len(file_paths)} files")
    processed = []
    for file in tqdm.trange(len(file_paths), leave=True):
        _file = file_paths.pop()

        res = requests.post(
            "https://api.deepai.org/api/nsfw-detector",
            files={"image": open(_file["filepath"], "rb"), },
            headers={"api-key": "YOUR KEY"},
        )
        out_name = _file["name"]
        data = res.json()

        if "err" in data.keys():
            out("Error processing image!")
            continue

        data_str = str(data)
        out(data_str)
        score = int(data["output"]["nsfw_score"] * 100)
        _file["nsfw_score"] = score
        out(f"{out_name}: {score}%")

        if score >= 75:
            out("Match!")
            processed.append(_file)
            out(", ".join(_file))
            print(processed)

    print(str(len(processed)) + ' pictures considered "NSFW"')

    conclude()


if __name__ == "__main__":
    main()
